# taken from: https://github.com/nextrevision/ansible-swarm-playbook
- name: swarm | Setup manager nodes
  hosts: manager
  strategy: linear
  become: yes
  tags:
    - bootstrap
    - docker-swarm
  tasks:
    - name: swarm | Determine swarm status
      shell: >
        docker info | egrep '^Swarm: ' | cut -d ' ' -f2
      register: swarm_status

    - name: swarm | Create group of manager nodes already in swarm
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' in hostvars[item].swarm_status.stdout_lines"
      run_once: true

    - name: swarm | Create group of manager nodes to join to swarm
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_bootstrap
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' not in hostvars[item].swarm_status.stdout_lines"
      run_once: true

- name: swarm | Setup worker nodes
  hosts: worker
  strategy: linear
  become: yes
  tags:
    - bootstrap
    - docker-swarm
  tasks:
    - name: swarm | Determine swarm status
      shell: >
        docker info | egrep '^Swarm: ' | cut -d ' ' -f2
      register: swarm_status

    - name: swarm | Create group of worker nodes already in swarm
      add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' in hostvars[item].swarm_status.stdout_lines"
      run_once: true

    - name: swarm | Create group of worker nodes to join to swarm
      add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_bootstrap
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: "'active' not in hostvars[item].swarm_status.stdout_lines"
      run_once: true

- name: swarm | Initialize swarm and manager node
  hosts: swarm_manager_bootstrap[0]
  strategy: linear
  become: yes
  tags:
    - bootstrap
    - docker-swarm
  tasks:
    - name: swarm | Initialize swarm
      shell: >
        docker swarm init
      when: "'swarm_manager_operational' not in groups"
      register: bootstrap_first_node

    - name: swarm | Add initialized host to group of manager nodes already in swarm
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_operational
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"
      when: bootstrap_first_node | changed

- name: swarm | setup swarm join tokens
  hosts: swarm_manager_operational[0]
  strategy: linear
  become: yes
  tags:
    - bootstrap
    - docker-swarm
  gather_facts: yes
  vars:
    iface: "{{ ansible_default_ipv4.interface }}"
  tasks:
    - name: swarm | Retrieve swarm manager token
      shell: docker swarm join-token -q manager
      register: swarm_manager_token

    - name: swarm | Retrieve swarm worker token
      shell: docker swarm join-token -q worker
      register: swarm_worker_token

    - name: swarm | Populate list of manager IPs
      add_host:
        hostname: "{{ hostvars[item]['ansible_' + iface]['ipv4']['address'] }}"
        groups: swarm_manager_ips
      with_items: "{{ ansible_play_hosts | default(play_hosts) }}"

- name: swarm | join additional manager nodes to swarm
  hosts: swarm_manager_bootstrap:!swarm_manager_operational
  become: yes
  tags:
    - bootstrap
    - docker-swarm
  vars:
    token: "{{ hostvars[groups['swarm_manager_operational'][0]]['swarm_manager_token']['stdout'] }}"
  tasks:
    - name: "swarm | Join manager nodes to swarm"
      shell: >
        docker swarm join
        --token={{ token }}
        {{ groups['swarm_manager_ips'][0] }}:2377

- name: swarm | join worker nodes to swarm
  hosts: swarm_worker_bootstrap
  become: yes
  tags:
    - bootstrap
    - docker-swarm
  vars:
    token: "{{ hostvars[groups['swarm_manager_operational'][0]]['swarm_worker_token']['stdout'] }}"
  tasks:
    - name: swarm | Join worker nodes to swarm
      shell: >
        docker swarm join
        --token={{ token }}
        {{ groups['swarm_manager_ips'][0] }}:2377

        - name: swarm | join additional manager nodes to swarm
          hosts: swarm_manager_bootstrap:!swarm_manager_operational

- name: swarm | Configure nvidia
  hosts: all
  become: yes
  tags:
    - bootstrap
    - docker-swarm
  tasks:
    - name: swarm | Gather gpu information
      command: nvidia-smi -q
      register: nvidia_smi

    - name: swarm | Configure nvidia-docker
      copy:
        content: |+
          [Unit]
          Description=Docker Application Container Engine
          Documentation=https://docs.docker.com
          After=network-online.target docker.socket firewalld.service
          Wants=network-online.target
          Requires=docker.socket

          [Service]
          Type=notify
          # the default is not to use systemd for cgroups because the delegate issues still
          # exists and systemd currently does not support the cgroup feature set required
          # for containers run by docker
          ExecStart=/usr/bin/dockerd -H fd:// --default-runtime=nvidia {{ nvidia_smi.stdout | regex_findall('UUID\s+:\s+(GPU-\w+)-.*') | map('regex_replace', '^(.*)$', '--node-generic-resource gpu=\1') | list | join(' ') }}
          ExecReload=/bin/kill -s HUP $MAINPID
          LimitNOFILE=1048576
          # Having non-zero Limits causes performance problems due to accounting overhead
          # in the kernel. We recommend using cgroups to do container-local accounting.
          LimitNPROC=infinity
          LimitCORE=infinity
          # Uncomment TasksMax if your systemd version supports it.
          # Only systemd 226 and above support this version.
          TasksMax=infinity
          TimeoutStartSec=0
          # set delegate yes so that systemd does not reset the cgroups of docker containers
          Delegate=yes
          # kill only the docker process, not all processes in the cgroup
          KillMode=process
          # restart the docker process if it exits prematurely
          Restart=on-failure
          StartLimitBurst=3
          StartLimitInterval=60s

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/docker.service
      become: yes
      notify: Restart docker service

    - name: swarm | Configure nvidia
      lineinfile:
        dest: /etc/nvidia-container-runtime/config.toml
        state: present
        regexp: '^#?\s*swarm-resource'
        line: 'swarm-resource = "DOCKER_RESOURCE_GPU"'
      become: yes
      notify: Restart docker service
  handlers:
    - name: swarm | Restart docker service
      systemd:
        name: docker
        state: restarted
        daemon_reload: yes
      listen: Restart docker service
      become: yes
