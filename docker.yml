- name: docker
  hosts: all
  tags:
    - bootstrap
    - docker
  vars:
    - docker_packages:
        - name: docker-ce
        - name: docker-compose
    - docker_packages_state: present
    - docker_apt_release_channel: stable
    # use {{ ansible_distribution_release }} instead of xenial once docker updates their package
    - docker_apt_repository: "deb [arch=amd64] https://download.docker.com/linux/{{ ansible_distribution|lower }} xenial {{ docker_apt_release_channel }}"
  tasks:
    - name: "docker | Configure dependencies"
      apt:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
      become: yes
      with_items:
        - name: docker
          state: absent
        - name: docker-engine
          state: absent
        - name: docker.io
          state: absent
        - name: apt-transport-https
          state: present
        - name: ca-certificates
          state: present

    - name: "docker | Configure apt key"
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
        state: "{{ docker_packages_state }}"
      become: yes

    - name: "docker | Configure repository"
      apt_repository:
        repo: "{{ docker_apt_repository }}"
        filename: docker
        state: present
        update_cache: yes
      become: yes

    - name: "docker | Configure"
      apt:
        name: "{{ item.name | default(item) }}"
        state: "{{ item.state | default(docker_packages_state) }}"
        autoremove: yes
      with_items: "{{ docker_packages }}"
      become: yes

    - name: "docker | Configure remote API"
      copy:
        content: |+
          # https://coreos.com/os/docs/latest/customizing-docker.html
          Description=Docker Socket for the API

          [Socket]
          ListenStream=2375
          BindIPv6Only=both
          Service=docker.service

          [Install]
          WantedBy=sockets.target
        dest: /etc/systemd/system/docker.socket
      become: yes
      notify: Restart docker
  handlers:
    - name: "docker | Restart docker.socket and docker.service"
      systemd:
        name: "{{ item.name | default(item) }}"
        state: "{{ item.state | default('restarted') }}"
        daemon_reload: "{{ item.daemon_reload | default('yes') }}"
      with_items:
        - name: docker.socket
          daemon_reload: yes
        - name: docker.service
          daemon_reload: no
      listen: Restart docker
      become: yes
